@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix aida: <https://tac.nist.gov/tracks/SM-KBP/2018/ontologies/InterchangeOntology#> .

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# restricted_aif.shacl
#
# Add on to aida_ontology.shacl use to enforce NIST-restricted-AIF.
# Requires aida_ontology.shacl to be loaded
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#########################
# Each edge justification is limited to two or fewer spans
#------------------------
# Can have a maximum of 2 justifiedBy/containedJustification properties
aida:EdgeJustificationLimit
    a sh:PropertyShape ;
    sh:path ( aida:justifiedBy aida:containedJustification ) ;
    sh:minCount 1 ;
    sh:maxCount 2 ;
    sh:message "Only 1 or 2 contained justifications allowed for an edge" .

# Turn off CompoundJustificationMinimum globally
aida:CompoundJustificationMinimum sh:deactivated true .

#########################
# Each edge justification must be represented uniformly in AIF by
# aida:CompoundJustification, even if only one span is provided
# Edges are assumed to be relation and event arguments
#------------------------
# Define restriction where justification can only be compound justification
aida:EdgeJustificationCompound
    a sh:PropertyShape ;
    sh:path aida:justifiedBy ;
    sh:class aida:CompoundJustification ;
    sh:message "Edge justification must be of type aida:CompoundJustification" .

# Enforce edge justification restriction on event and relation arguments
aida:EventArgumentShape
    sh:property aida:EdgeJustificationCompound, aida:EdgeJustificationLimit .
aida:RelationArgumentShape
    sh:property aida:EdgeJustificationCompound, aida:EdgeJustificationLimit .

#########################
# CompoundJustification must be used only for justifications of argument assertions,
# and not for justifications for entities, events, or relation KEs
#------------------------
aida:RestrictCompoundJustificationPropertyShape
   a sh:PropertyShape ;
   sh:path aida:justifiedBy ;
   sh:not [sh:class aida:CompoundJustification] ;
   sh:message "CompoundJustification must be used only for justifications of argument assertions" .

aida:EventShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:RelationShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:EntityShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:SentimentShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:SharedTypeShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:LinkAssertionShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:ClusterMembershipShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:MutualExclusionConstraintShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

#########################
# Video must use aida:KeyFrameVideoJustification. Remove ShotVideoJustification
#------------------------
# Restrict normal Justification types globally
aida:JustificationPropertyShape
    sh:xone (
        [sh:class aida:TextJustification]
        [sh:class aida:ImageJustification]
        [sh:class aida:AudioJustification]
        [sh:class aida:KeyFrameVideoJustification]
        [sh:class aida:CompoundJustification] ) .

# Restrict CompoundJustificationTypes globally
aida:CompoundJustificationTypes
    sh:xone (
        [sh:class aida:TextJustification]
        [sh:class aida:ImageJustification]
        [sh:class aida:AudioJustification]
        [sh:class aida:KeyFrameVideoJustification] ) .

#########################
# 4.3 #2 Each cluster must have an IRI
#------------------------
aida:ClusterShape sh:nodeKind sh:IRI .

#########################
# Members of clusters are entity objects, relation objects, and event objects (not clusters)
#------------------------
aida:ClusterMembershipShape
    sh:property [
        a sh:PropertyShape ;
        sh:path aida:clusterMember ;
        sh:xone (
            [sh:class aida:Entity]
            [sh:class aida:Event]
            [sh:class aida:Relation]
        ) ;
        sh:message "Cluster member type not allowed to be part of cluster"
    ] .

#########################
# Entity, Relation, and Event object is required to be part of at least one cluster.
# This is true even if there is nothing else in the cluster
#------------------------
aida:EntityShape
    sh:sparql [
        sh:message "Entity is not clustered" ;
        sh:select """
            PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2018/ontologies/InterchangeOntology#>
            SELECT $this
            WHERE {
                FILTER NOT EXISTS {
                    ?membership a aida:ClusterMembership .
                    ?membership aida:clusterMember $this .
                }
            }
        """ ;
    ] .

aida:EventShape
    sh:sparql [
        sh:message "Event is not clustered" ;
        sh:select """
            PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2018/ontologies/InterchangeOntology#>
            SELECT $this
            WHERE {
                FILTER NOT EXISTS {
                    ?membership a aida:ClusterMembership .
                    ?membership aida:clusterMember $this .
                }
            }
        """ ;
    ] .

aida:RelationMustBeClustered
    a sh:NodeShape ;
    sh:targetClass aida:Relation ;
    sh:sparql [
        sh:message "Relation is not clustered" ;
        sh:select """
            PREFIX aida:  <https://tac.nist.gov/tracks/SM-KBP/2018/ontologies/InterchangeOntology#>
            SELECT $this
            WHERE {
                FILTER NOT EXISTS {
                    ?membership a aida:ClusterMembership .
                    ?membership aida:clusterMember $this .
                }
            }
        """ ;
    ] .

#########################
# Each confidence value must be between 0 and 1
#------------------------
aida:ConfidenceValueRange
    a sh:NodeShape ;
    sh:targetClass aida:Confidence ;
    sh:property [
        sh:path aida:confidenceValue ;
        sh:minInclusive 0 ;
        sh:maxInclusive 1;
        sh:message "Confidence value must be between 0 and 1"]
    .
