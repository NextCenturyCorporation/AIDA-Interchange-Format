@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix skos:  <http://www.w3.org/2004/02/skos/core#> .
@prefix aidaDomain: <http://www.isi.edu/aida/domainOntology#> .
@prefix aida: <http://www.isi.edu/aida/interchangeOntology#> .

# TODO: make ColdStart translator add systems
# TODO: mark entities with aida:Entity
# TODO: forbid extraneous content

# This document is a specification for validating knowledge graphs for the GAIA team's
# representation model (GKG - GAIA Knowledge GRaphs) for the DARPA AIDA program.
#
# The graph representation is in RDF. You can think of RDF in terms of a directed graph.
# For GKGs, there are basically two kinds of nodes:
#  (a) "content nodes" give the core information about the world we are trying to express.  These
#     will be either (i) entities (people, places, organizations, etc,), (ii) events (attacks,
#     marriages, etc.), (iii) relations (e.g. "Jack is married to Sophie"), (iv) assertions that
#     an entity participated in an event in some way, or (v) assertions that someone holds some
#     sentiment about some entity or event.
#  (b) "annotation nodes" corresponding to structures encoding information like confidence,
#        mutual exclusion constraints, metadata, etc.
#  The edges of an RDF graph are called "properties".
#
#  All nodes can either have an "IRI", which is a unique global identifier, or they can be blank,
#  meaning no identifier is specified.  Content nodes in a GKG *must have an IRI*. Annotation nodes
# *may* have an IRI but will typically be blank unless they need to be referred to from other places
#  in the graph.
#
# There are two RDF ontologies to be concerned with. What is described and validated here is the
# "interchange ontology".  The domain working group is also specifying a "domain ontology" (e.g.
# entity types, event types, etc.).  The domain ontology has not yet been specified, but for
# now we assume it will include aidaDomain:EntityType, aidaDomain:EventType,
# and aidaDomain:RelationType to be supertypes of entity, event, and relation types, respectively.
#
# The explanation of the format will be interleaved with code for performing validation. The
# validation constraints are written in the "Shapes Constraint Language"
# ( https://www.w3.org/TR/shacl/ ).  It will define "node shapes" which constrain the nodes of the
# graph in various ways.  It will also define reusable "property shapes" which can capture common
# property patterns across node types.  You will frequently see that node shapes refer to property
# shapes which will be defined later in the document.

# the first type of content node is an entity, which represents some non-event thing in the world
# (e.g. a person, place, thing, etc.)
# Each entity must have at least one assertion giving it a type which is a sub-class of
# aidaDomain:entityType (see type assertions below)
# TODO: enforce the above
aida:EntityShape
  a sh:NodeShape ;
  sh:targetClass aida:Entity ;

  # entities must have unique identifiers
  sh:nodeKind sh:IRI ;

  # may be linked to one or more things in an external KB
  sh:property aida:LinkPropertyShape ;

  # may have zero or more string labels for user consumption
  sh:property [
     sh:path skos:prefLabel ;
     sh:datatype xsd:string ];

  # may provide a confidence
  sh:property aida:ConfidencePropertyShape ;

  # may provide an one or more source systems
  sh:property aida:SystemPropertyShape ;

  # may provide justifications for its existence
  sh:property aida:JustificationPropertyShape ;

  # no other properties are allowed
  sh:closed true ;
  # except rdf:type
  sh:ignoredProperties (rdf:type)
  .

# the second type of content node is an event, which represents something which happens in the world
# (e.g. an attack, a marriage, a business acquisition)
# Each event must have at least one assertion giving it a type which is a sub-class of
# aidaDomain:eventType
# TODO: enforce the above
aida:EventShape
  a sh:NodeShape ;
  sh:targetClass aida:Event ;

  # events must have unique identifiers
  sh:nodeKind sh:IRI ;

  # may have zero or more string labels for user consumption
  sh:property [
     sh:path skos:prefLabel ;
     sh:datatype xsd:string ];

  # may provide a confidence
  sh:property aida:ConfidencePropertyShape ;

  # may provide an one or more source systems
  sh:property aida:SystemPropertyShape ;

  # may provide one or more justifications for its existence
  sh:property aida:JustificationPropertyShape ;

  # no other properties are allowed
  sh:closed true ;
  # except rdf:type
  sh:ignoredProperties (rdf:type)
  .

# the third type of content node is an event argument assertion. This is the claim that some
# entity is involved in an event in some way.
aida:EventArgumentShape
   a sh:NodeShape ;

  # this shape only applies when the predicate is an event argument type from
  # the ontology
  sh:SPARQLTarget [
    sh:select """
        SELECT ?this
        WHERE {
            ?this a rdf:Statement .
            ?pred a aidaDomain:EventArgumentType .
            ?this rdf:predicate ?pred .
        }
        """ ;
  ];

  # the subject is the event some entity is participating in
  sh:property [
    sh:path rdf:subject ;
    sh:class aida:Event ] ;

  # the object is the entity participating in the event
  sh:property [
    sh:path rdf:object ;
    sh:class aida:Entity ] ;
   # TODO: handle temporal or string values

   # may have zero or more string labels for user consumption
  sh:property [
    sh:path skos:prefLabel ;
    sh:datatype xsd:string ];

  # may provide a confidence
  sh:property aida:ConfidencePropertyShape ;

  # may provide an one or more source systems
  sh:property aida:SystemPropertyShape ;

  # may provide one or more justifications for its existence
  sh:property aida:JustificationPropertyShape ;

  # no other properties are allowed
  sh:closed true ;
  # except rdf:type
  sh:ignoredProperties (rdf:type rdf:predicate)
  .

# the fourth type of content node is a relation assertion.
aida:RelationShape
   a sh:NodeShape ;

  # this shape only applies when the predicate is a relation type from
  # the ontology
  sh:SPARQLTarget [
    sh:select """
        SELECT ?this
        WHERE {
            ?this a rdf:Statement .
            ?pred a aidaDomain:RelationType .
            ?this rdf:predicate ?pred .
        }
        """ ;
  ];

  # the subject and properties define the two arguments of the relation
  sh:property [
    sh:path rdf:subject ;
    sh:class aida:Entity ] ;

  sh:property [
    sh:path rdf:object ;
    sh:class aida:Entity ] ;
   # TODO: handle temporal or string values

   # may have zero or more string labels for user consumption
  sh:property [
    sh:path skos:prefLabel ;
    sh:datatype xsd:string ];

  # may provide a confidence
  sh:property aida:ConfidencePropertyShape ;

  # may provide an one or more source systems
  sh:property aida:SystemPropertyShape ;

  # may provide one or more justifications for its existence
  sh:property aida:JustificationPropertyShape ;

  # no other properties are allowed
  sh:closed true ;
  # except rdf:type
  sh:ignoredProperties (rdf:type rdf:predicate)
  .

# the fifth type of content node is a sentiment assertion.
aida:SentimentShape
   a sh:NodeShape ;

  # this shape only applies when the predicate is a sentiment from
  # the ontology
  sh:SPARQLTarget [
    sh:select """
        SELECT ?this
        WHERE {
            ?this a rdf:Statement .
            ?pred a aidaDomain:Sentiment .
            ?this rdf:predicate ?pred .
        }
        """ ;
  ];

  # sentiment must be held by some entity
  sh:property [
    sh:path rdf:subject ;
    sh:class aida:Entity ] ;

  # sentiment can be held about an entity or event
  sh:property [
    sh:path rdf:object ;
    sh:xone ( [sh:class aida:Entity ]
              [sh:class aida:Event ] ) ] ;
   # TODO: handle temporal or string values

   # may have zero or more string labels for user consumption
  sh:property [
    sh:path skos:prefLabel ;
    sh:datatype xsd:string ];

  # may provide a confidence
  sh:property aida:ConfidencePropertyShape ;

  # may provide an one or more source systems
  sh:property aida:SystemPropertyShape ;

  # may provide one or more justifications for its existence
  sh:property aida:JustificationPropertyShape ;

  # no other properties are allowed
  sh:closed true ;
  # except rdf:type
  sh:ignoredProperties (rdf:type rdf:predicate)
  .

# we also use RDF statements to assign types to entities and events
aida:TypeShape
   a sh:NodeShape ;

   # this shape only applies when the predicate of the RDF statement is rdf:type
  sh:SPARQLTarget [
    sh:select """
        SELECT ?this
        WHERE {
            ?this a rdf:Statement .
            ?this rdf:predicate rdf:type .
        }
        """ ;
  ];

   # the subject and object properties define the two arguments of the relation
   sh:property [
     sh:path rdf:subject ;
     sh:xone ( [sh:class aida:Entity ]
               [sh:class aida:Event ] ) ];

   # TODO: can we validate the interaction so that entities are restricted to having entity types
   # and events are restricted to having event types?
   sh:property [
     sh:path rdf:object ;
     sh:xone ( [sh:class aidaDomain:EntityType ]
               [sh:class aidaDomain:EventType ] ) ];
    # TODO: handle temporal or string values

    # may have zero or more string labels for user consumption
   sh:property [
     sh:path skos:prefLabel ;
     sh:datatype xsd:string ];

   # may provide a confidence
   sh:property aida:ConfidencePropertyShape ;

   # may provide an one or more source systems
   sh:property aida:SystemPropertyShape ;

   # may provide one or more justifications for its existence
   sh:property aida:JustificationPropertyShape ;

   # no other properties are allowed
   sh:closed true ;
   # except rdf:type
   sh:ignoredProperties (rdf:type rdf:predicate)
   .


# Most things may be annotated with a confidence structure.
# A confidence structure is an annotation node. It is not simply a property because we want to
# be able to annotate confidence structures with provenance information.
# By convention, TA1s should attach their confidences to justification objects only.  TA2 should
# then synthesize these and attach confidences directly to primary KB objects (e.g. relations,
# events, etc.)
aida:ConfidenceShape
  a sh:NodeShape ;
  sh:targetClass aida:Confidence ;
  # every confidence node must have exactly one numeric confidence value
  # no constraints are placed on what these confidence values are, except that higher is better
  sh:property [
    sh:path aida:confidenceValue ;
    sh:datatype xsd:double ;
    sh:minCount 1 ;
    sh:maxCount 1 ] ;

    # may specify what system(s) this confidence came from
    sh:property aida:SystemPropertyShape .

aida:ConfidencePropertyShape
   a sh:PropertyShape ;
   sh:path aida:confidence ;
   sh:nodeShape aida:ConfidenceShape .

# Most things may be annotated with what system produced them
# To do this, we need to declare nodes which represent the systems
aida:SystemShape
   a sh:NodeShape ;
   sh:targetClass aida:System ;
   # a system must have an explicit identifier
   sh:nodeKind sh:IRI ;
   # these nodes are not allowed to have any other properties
   sh:closed true ;
   # except rdf:type
   sh:ignoredProperties (rdf:type)
   .

# once we have declared the system nodes, other nodes may be linked to a system via a property
# which points to a system
aida:SystemPropertyShape
   a sh:PropertyShape ;
   sh:path aida:system ;
   sh:class aida:System .


# Systems need to provide justifications from text, image, video, etc. for the assertions they make
# Currently we just support textual justifications but others will be added in the future.
aida:TextJustificationShape
   a sh:NodeShape ;
   sh:targetClass aida:TextProvenance ;
   # each justification must have exactly one source document ID
   sh:property [
     sh:path aida:source ;
     sh:datatype xsd:string ;
     sh:minCount 1;
     sh:maxCount 1 ];
   # exactly one start character offset within the document
   sh:property [
      sh:path aida:startOffset ;
      sh:datatype xsd:int ;
      sh:minCount 1;
      sh:maxCount 1 ];
   # and exactly one inclusive end offset within the document
   sh:property [
       sh:path aida:endOffsetInclusive ;
       sh:datatype xsd:int ;
       sh:minCount 1;
       sh:maxCount 1 ];
   # an optional string label for user consumption (TODO: is this allowed? Probably not?)
   sh:property [
      sh:path skos:prefLabel ;
      sh:datatype xsd:string ];
   # justifications may provide a confidence but do not have to
   sh:property aida:ConfidencePropertyShape ;
   # may provide an optional source system
   sh:property aida:SystemPropertyShape ;
   # no other properties are allowed
   sh:closed true ;
   # except rdf:type
   sh:ignoredProperties (rdf:type) .

aida:JustificationPropertyShape
   a sh:PropertyShape ;
   sh:path aida:justifiedBy ;
   sh:class aida:TextProvenance .

# use to express that an AIDA Entity is the same thing as something in an external knowledge base
aida:LinkAssertionShape
  a sh:NodeShape ;
  sh:targetClass aida:LinkAssertion ;

  # must have a single link target with the identifier of the thing in an external KB it is linked
  # to. Currently the external DB reference must be a string, but IRIs might be allowed in the
  # future
  sh:property [
     a sh:PropertyShape ;
     sh:path aida:linkTarget ;
     sh:value xsd:string ;
     sh:minValue 1 ;
     sh:maxValue 1] ;

   # may provide a confidence
   sh:property aida:ConfidencePropertyShape ;

   # may provide an one or more source systems
   sh:property aida:SystemPropertyShape ;

   # may provide one or more justifications for the link
   sh:property aida:JustificationPropertyShape ;

  # no other properties are allowed
  sh:closed true ;

  # except rdf:type
  sh:ignoredProperties (rdf:type) .

aida:LinkPropertyShape
  a sh:PropertyShape ;
  sh:path aida:link ;
  sh:class aida:LinkAssertion .

# we use RDF statements for four things: relations, type assertions, event argument, and
# sentiment assertions. Each of these has already been described above. We want to forbid any other
# use of RDF statement.
aida:RdfStatementShape
  a sh:NodeShape ;
  sh:targetClass rdf:Statement ;

  sh:property [
     sh:path rdf:predicate ;
     sh:exone (
         [ sh:class rdf:type ]
         [ sh:class aidaDomain:EventArgumentType ]
         [ sh:class aidaDomain:RelationType ]
         [ sh:class aidaDomain:Sentiment ] ) ]
  .

# Sometimes there is uncertainty about whether or not two entities or events are the same.
# In such cases, we make "cluster" objects which can link together the possibly identical
# entities or events
# TODO: validate clusters are homogenous (e.g. can't mix entities and events)
aida:ClusterShape
   a sh:NodeShape ;
   sh:targetClass aida:SameAsCluster ;

   # every cluster must have a single prototype - the item we are absolutely sure is, by definition,
   # in the cluster
   sh:property [
      a sh:PropertyShape ;
      sh:path aida:prototype ;
      sh:xone ( [sh:class aida:Entity]
                [sh:class aida:Event] )  ;
      sh:minCount 1 ;
      sh:maxCount 1  ] ;

   # may provide an one or more source systems
   sh:property aida:SystemPropertyShape ;

   sh:closed true .

# we declare that other entities might be in the cluster by using ClusterMember assertions
aida:ClusterMemberShape
   a sh:NodeShape ;
   sh:targetClass aida:ClusterMember ;

   # the cluster property points to the cluster
   sh:property [
      a sh:PropertyShape ;
      sh:path aida:cluster ;
      sh:class aida:SameAsCluster ;
      sh:minCount 1 ;
      sh:maxCount 1  ] ;

   # the member property points to the thing which might be in the cluster
   # the member could itself be another cluster, allowing hierarchical coreference
   sh:property [
      a sh:PropertyShape ;
      sh:path aida:member ;
      sh:xone ( [sh:class aida:Entity]
                [sh:class aida:Event]
                [sh:class aida:SameAsCluster] )  ;
      sh:minCount 1 ;
      sh:maxCount 1  ] ;

   # may provide a confidence
   sh:property aida:ConfidencePropertyShape ;

   # may provide an one or more source systems
   sh:property aida:SystemPropertyShape ;

   # may provide one or more justifications for the link
   sh:property aida:JustificationPropertyShape ;

   sh:closed true .

# A Subgraph is a collection of content and annotation nodes.  They are used to talk about
# sub-graphs of the full knowledge graph for when we need to specify confidences or mutual
# exclusion constraints over large structures
aida:ContentGraphShape
  # note this is a declaration of a set of node constraints
  a sh:NodeShape ;
  # and that these contains apply to nodes of type aida:KnowledgeGraph
  sh:targetClass aida:Subgraph ;
  # a Subgraph can have a property (=outgoing labelled edge)
  sh:property [
     # which is called "subGraphContains"
     sh:path aida:subgraphContains ;
     # every content graph must contain at least one content assertion
     sh:minCount 1 ;
     # the contained nodes must be of the content node types
     sh:exone (
          [sh:class aida:Entity]
          [sh:class aida:Event]
          [sh:class aida:Relation]
          [sh:class aida:SentimentAssertion] )
  ] ;

  # a graph may provide a confidence
  # this is not useful for a root graph but is for when we want to make confidence assertions
  # about sub-graphs instead of single edges
  sh:property aida:ConfidencePropertyShape ;

  # may provide an one or more source systems
  sh:property aida:SystemPropertyShape ;

  # and can't contain anything else
  sh:closed true ;
  # (except the rdf:type assertion)
  sh:ignoredProperties (rdf:type) .

# Sometimes we need to indicate that either one set of assertions about the world should be
# included in a graph *or* some other set of assertions should. In these cases we use a
# MutualExclusionConstraints
aida:MutualExclusionConstraintShape
   a sh:NodeShape ;
   sh:targetClass aida:MutualExclusion ;

   # the different options are given by alternative properties.
   # there may be at least one alternative specified, but there may be many
   sh:property [
      a sh:PropertyShape;
      sh:path aida:alternative;
      sh:class aida:MutualExclusionAlternative ;
      sh:minCount 1 ];

   # optionally, a confidence value may be given to the "none of the above" option
   sh:property [
      a sh:PropertyShape ;
      sh:path aida:none-of-the-above;
      sh:class aida:Confidence ;
      sh:maxCount 1 ] ;

   # may provide an one or more source systems
   sh:property aida:SystemPropertyShape ;

   # may provide one or more justifications for the link
   sh:property aida:JustificationPropertyShape ;

    sh:closed true ;

    sh:ignoredProperties ( rdf:type ).

aida:MutualExclusionAlternativeShape
   a sh:NodeShape ;
   sh:targetClass aida:MutualExclusionAlternative ;

   # there must be at least one graph edge in this alternative
   # each edge is included by making it the object of a alternate_graph property
   sh:property [
      a sh:PropertyShape ;
      sh:path aida:alternativeGraph ;
      sh:class aida:Subgraph ;
      sh:minCount 1 ] ;

    # each alternative must specify confidence
    sh:property aida:ConfidencePropertyShape ;

    sh:closed true ;
    sh:ignoredProperties ( rdf:type )
    .

# TODO: private data

