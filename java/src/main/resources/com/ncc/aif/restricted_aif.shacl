@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix aida: <https://raw.githubusercontent.com/NextCenturyCorporation/AIDA-Interchange-Format/master/java/src/main/resources/com/ncc/aif/ontologies/InterchangeOntology#> .

#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
# restricted_aif.shacl
#
# Add-on to aida_ontology.shacl used to enforce NIST-restricted-AIF.
# Requires aida_ontology.shacl to be loaded
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

#########################
# Each edge justification is limited to one or two spans
#------------------------
# Can have 1 or 2 containedJustification properties
aida:EdgeJustificationCount
    a sh:SPARQLConstraint ;
    sh:message "Exactly 1 or 2 contained justifications required for an edge" ;
    sh:select """
        PREFIX aida:  <https://raw.githubusercontent.com/NextCenturyCorporation/AIDA-Interchange-Format/master/java/src/main/resources/com/ncc/aif/ontologies/InterchangeOntology#>
        SELECT $this (COUNT(DISTINCT ?source) AS $value)
        WHERE {
            $this aida:justifiedBy ?x .
            ?x a aida:CompoundJustification .
            OPTIONAL { ?x aida:containedJustification ?source }
        }
        GROUP BY $this ?x
        HAVING (COUNT(?source) > 2 || COUNT(?source) < 1)
    """
    .

#########################
# Each edge justification must be represented uniformly in AIF by
# aida:CompoundJustification, even if only one span is provided
# Edges are assumed to be relation and event arguments
#------------------------
# Define restriction where justification can only be compound justification
aida:EdgeJustificationCompound
    a sh:PropertyShape ;
    sh:path aida:justifiedBy ;
    sh:class aida:CompoundJustification ;
    sh:message "Edge justification must be of type aida:CompoundJustification" .

# Enforce edge justification restrictions on event and relation arguments
aida:EventArgumentShape
    sh:property aida:EdgeJustificationCompound ;
    sh:sparql aida:EdgeJustificationCount
    .
aida:RelationArgumentShape
    sh:property aida:EdgeJustificationCompound ;
    sh:sparql aida:EdgeJustificationCount
    .

#########################
# CompoundJustification must be used only for justifications of argument assertions,
# and not for justifications for entities, events, or relation KEs
#------------------------
aida:RestrictCompoundJustificationPropertyShape
   a sh:PropertyShape ;
   sh:path aida:justifiedBy ;
   sh:not [sh:class aida:CompoundJustification] ;
   sh:message "CompoundJustification must be used only for justifications of argument assertions" .

aida:EventRelationShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:EntityShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:SentimentShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:SharedTypeShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:LinkAssertionShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:ClusterMembershipShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

aida:MutualExclusionConstraintShape
    # may not provide compound justification
    sh:property aida:RestrictCompoundJustificationPropertyShape .

#########################
# Video must use aida:KeyFrameVideoJustification. Remove ShotVideoJustification
#------------------------
# Restrict normal Justification types globally
aida:JustificationPropertyShape
    sh:not [sh:class aida:ShotVideoJustification] .

# Restrict CompoundJustificationTypes globally
aida:CompoundJustificationTypes
    sh:not [sh:class aida:ShotVideoJustification] .

#########################
# 4.3 #2 Each cluster must have an IRI
#------------------------
aida:ClusterShape sh:nodeKind sh:IRI .

#########################
# Members of clusters are entity objects, relation objects, and event objects (not clusters)
#------------------------
# TODO: make this sh:not
aida:ClusterMembershipShape
    sh:property [
        a sh:PropertyShape ;
        sh:path aida:clusterMember ;
        sh:xone (
            [sh:class aida:Entity]
            [sh:class aida:Event]
            [sh:class aida:Relation]
        ) ;
        sh:message "Cluster member type not allowed to be part of cluster"
    ] .

#########################
# Entity, Relation, and Event object is required to be part of at least one cluster.
# This is true even if there is nothing else in the cluster
#------------------------
aida:ObjectMustBeClustered
    a sh:SPARQLConstraint ;
    sh:message "Object must be clustered" ;
    sh:select """
        PREFIX aida:  <https://raw.githubusercontent.com/NextCenturyCorporation/AIDA-Interchange-Format/master/java/src/main/resources/com/ncc/aif/ontologies/InterchangeOntology#>
        SELECT $this
        WHERE {
            FILTER ( NOT EXISTS { $this ^aida:clusterMember ?clusterMembership } &&
                NOT EXISTS { $this ^aida:prototype ?cluster } ) .
        }
    """ .

aida:EntityShape
    sh:sparql aida:ObjectMustBeClustered .

aida:EventRelationShape
    sh:sparql aida:ObjectMustBeClustered .

#########################
# Each confidence value must be between 0 and 1
#------------------------
aida:ConfidenceValueRange
    a sh:NodeShape ;
    sh:targetClass aida:Confidence ;
    sh:property [
        sh:path aida:confidenceValue ;
        sh:minExclusive 0 ;
        sh:maxInclusive 1;
        sh:message "Confidence value must be between 0 and 1 (0 < c <= 1)"]
    .

#########################
# Each entity/relation/event type statement must have at least one justification
# Removed for M36
#------------------------
#aida:SharedTypeShape
#	sh:property aida:RequiredJustificationPropertyShape .

# Use this instead of aida:JustificationPropertyShape when you wish to force justifications to be present
aida:RequiredJustificationPropertyShape
   a sh:PropertyShape ;
   sh:path aida:justifiedBy ;
   sh:propertyShape aida:JustificationPropertyShape ;
   sh:minCount 1 ;
   sh:message "Type assertions must have at least one justification" .

#########################
# Justifications require a source document and a source
# The source restriction is defined on the aida:SharedJustificationShape in the aida_ontology.shacl
#------------------------
aida:JustificationSourceDocumentShape
    a sh:NodeShape ;
    sh:targetClass aida:Justification ;
    sh:property [
        sh:path aida:sourceDocument ;
        sh:minCount 1 ;
        sh:message "Justifications require a sourceDocument" ;
    ]
    .

#########################
# Each entity/filler name, text value, and numeric value is limited to 256 UTF-8 characters
#------------------------
aida:NamePropertyShape
  sh:maxLength 256 .

aida:TextPropertyShape
  sh:maxLength 256 .

aida:NumericPropertyShape
  sh:maxLength 256 .

#########################
# Each Cluster, Entity, Event, or Relation can specify up to one informative mention per document as long as each
# informative mention points to a different sourceDocument
#------------------------
aida:InformativeJustificationMembersUniqueParentDoc
    a sh:SPARQLConstraint ;
    sh:message "Each Cluster, Entity, Event, or Relation can specify up to one informative mention per document as long as each informative mention points to a different sourceDocument" ;
    sh:select """
        PREFIX aida:  <https://raw.githubusercontent.com/NextCenturyCorporation/AIDA-Interchange-Format/master/java/src/main/resources/com/ncc/aif/ontologies/InterchangeOntology#>
      	SELECT $this
      	WHERE {
      	    $this aida:informativeJustification ?mentions .
      	    ?mentions aida:sourceDocument ?parentDoc
      	}
      	GROUP BY $this
      	HAVING (COUNT(DISTINCT ?parentDoc) < COUNT(DISTINCT ?mentions))
    """
    .

aida:InformativeJustificationMembersShape
    a sh:NodeShape ;
    sh:targetSubjectsOf aida:informativeJustification ;
    sh:sparql aida:InformativeJustificationMembersUniqueParentDoc .

#########################
# 4.3 #10: Each aida:linkAssertion must have exactly one aida:confidence
#------------------------
# Add to pre-existing LinkAssertionShape
aida:LinkAssertionShape
    sh:property [
        sh:path aida:confidence ;
        sh:minCount 1 ;
        sh:maxCount 1
    ] .

#########################
# Prevent prototype from being member of a cluster it is not the prototype of and 
# prevent it from being prototype of mulitple clusters
#------------------------
aida:PrototypeShape
    a sh:NodeShape ;
    sh:targetObjectsOf aida:prototype ;
    sh:property aida:PreventMultiClusterPrototypeShape ;
    sh:sparql aida:PreventNonClusterPrototypeMemberShape .

# Prototype can't be prototype of multiple clusters
aida:PreventMultiClusterPrototypeShape
    a sh:PropertyShape ;
    sh:path [ sh:inversePath aida:prototype ] ;
    sh:maxCount 1 ;
    sh:message "Prototype can't be prototype of multiple clusters" .

# Prototype can't be member of different cluster
aida:PreventNonClusterPrototypeMemberShape
    # Using SPARQL because unable to use sh:inversePath in sh:equals
    a sh:SPARQLConstraint ;
    sh:select """
        PREFIX aida:  <https://raw.githubusercontent.com/NextCenturyCorporation/AIDA-Interchange-Format/master/java/src/main/resources/com/ncc/aif/ontologies/InterchangeOntology#>
      	SELECT $this $value
      	WHERE {
      	    $this ^aida:clusterMember / aida:cluster $value .
            $this ^aida:prototype ?cluster .
            FILTER ($value != ?cluster) .
      	}
    """ ;

    sh:message "Prototype can't be member of cluster it's not prototype of" .

#########################
# Prevent handle on cluster
#------------------------
aida:PreventHandleOnCluster
    a sh:NodeShape ;
    sh:targetClass aida:SameAsCluster ;
    sh:not [
        sh:path aida:handle ;
        sh:minCount 1 
    ] ;
    sh:message "Handle is not allowed on cluster" .

#########################
# Prevent informative justification on cluster
#------------------------
aida:PreventInformativeJustificationCluster
    a sh:NodeShape ;
    sh:targetClass aida:SameAsCluster ;
    sh:not [
        sh:path aida:informativeJustification ;
        sh:minCount 1 
    ] ;
    sh:message "Informative justification is not allowed on cluster" .

#########################
# LDC time restrictions. Extends aida_ontology aida:LDCTimeShape
# LDCTime must have 1 "AFTER" and 1 "BEFORE" aida:start
# LDCTime must have 1 "AFTER" and 1 "BEFORE" aida:end
#------------------------
aida:LDCTimeShape
    sh:property [
        sh:path ( aida:start aida:timeType );
        sh:minCount 2;
        sh:maxCount 2;
        sh:hasValue "AFTER", "BEFORE" ;
        sh:message "LDCTime must have 1 BEFORE and 1 AFTER for aida:start"
    ] ;
    sh:property [
        sh:path ( aida:end aida:timeType );
        sh:minCount 2;
        sh:maxCount 2;
        sh:hasValue "AFTER", "BEFORE" ;
        sh:message "LDCTime must have 1 BEFORE and 1 AFTER for aida:end"
    ] .
